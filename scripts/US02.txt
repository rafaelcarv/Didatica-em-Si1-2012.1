#User Story 02 - Cadastro de Caronas

zerarSistema

#US02 - Cadastro de caronas. Permitir o cadastro de caronas no perfil do usuário. 
#Deve-se informar o local de origem, o local de destino, data, hora de saída e quantidade de vagas disponíveis.
#Busca de caronas. Permitir que o usuário procure por caronas.
#Deve-se informar o local de origem e o local de destino.
#A busca só retorna caronas que ainda irá acontecer.

#Entradas Válidas
criarUsuario login="mark" senha="m@rk" nome="Mark Zuckerberg" endereco="Palo Alto, California" email="mark@facebook.com"
sessaoMark=abrirSessao login="mark" senha="m@rk"

#Localizar carona, sem carona cadastrada.
expect {} localizarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="João Pessoa"
expect {} localizarCarona idSessao=${sessaoMark} origem="São Francisco" destino="Palo Alto"
expect {} localizarCarona idSessao=${sessaoMark} origem="Rio de Janeiro" destino="São Paulo"

#o método cadastrar carona retorna id
sessaoMark=abrirSessao login="mark" senha="m@rk"
carona1ID=cadastrarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="João Pessoa" data="23/06/2013" hora="16:00" vagas=3
expect "Campina Grande" getAtributoCarona idCarona=${carona1ID} atributo="origem"
expect "João Pessoa" getAtributoCarona idCarona=${carona1ID} atributo="destino"
expect "Campina Grande - João Pessoa" getTrajeto idCarona=${carona1ID}

carona2ID=cadastrarCarona idSessao=${sessaoMark} origem="Rio de Janeiro" destino="São Paulo" data="31/05/2013" hora="08:00" vagas=2
expect "31/05/2013" getAtributoCarona idCarona=${carona2ID} atributo="data"
expect 2 getAtributoCarona idCarona=${carona2ID} atributo="vagas"

carona3ID=cadastrarCarona idSessao=${sessaoMark} origem="João Pessoa" destino="Campina Grande" data="25/11/2026" hora="06:59" vagas=4
expect "João Pessoa para Campina Grande, no dia 25/11/2026, as 06:59" getCarona idCarona=${carona3ID}

carona4ID=cadastrarCarona idSessao=${sessaoMark} origem="João Pessoa" destino="Lagoa Seca" data="25/11/2016" hora="05:00" vagas=4
expect "João Pessoa para Lagoa Seca, no dia 25/11/2016, as 05:00" getCarona idCarona=${carona4ID}

carona5ID=cadastrarCarona idSessao=${sessaoMark} origem="João Pessoa" destino="Lagoa Seca" data="25/11/2017" hora="05:00" vagas=4
expect "João Pessoa para Lagoa Seca, no dia 25/11/2017, as 05:00" getCarona idCarona=${carona5ID}

#Localizar carona.
expect {} localizarCarona idSessao=${sessaoMark} origem="São Francisco" destino="Palo Alto"
expect {${carona2ID}} localizarCarona idSessao=${sessaoMark} origem="Rio de Janeiro" destino="São Paulo"
expect {${carona3ID}} localizarCarona idSessao=${sessaoMark} origem="João Pessoa" destino="Campina Grande"

#Todas as caronas que irá acontecer e que tem como origem João pessoa.
expect {${carona3ID},${carona4ID},${carona5ID}} localizarCarona idSessao=${sessaoMark} origem="João Pessoa" destino=""

#Todas as caronas que irá acontecer e que tem como destino São Paulo.
expect {${carona2ID}} localizarCarona idSessao=${sessaoMark} origem="" destino="São Paulo"

#Todas as caronas que irá acontecer.
expect {${carona1ID},${carona2ID},${carona3ID},${carona4ID},${carona5ID}} localizarCarona idSessao=${sessaoMark} origem="" destino=""

#Cadastro de carona com entradas inválidas, Nenhuma carona aqui deve ser cadastrada.
expectError "Sessão inválida" cadastrarCarona idSessao= origem="Campina Grande" destino="João Pessoa" data="23/06/2013" hora="16:00" vagas=3
expectError "Sessão inválida" cadastrarCarona idSessao="" origem="Patos" destino="São Paulo" data="31/05/2013" hora="08:00" vagas=2
expectError "Sessão inexistente" cadastrarCarona idSessao="teste" origem="João Pessoa" destino="Campina Grande" data="25/11/2026" hora="06:59" vagas=4

expectError "Origem inválida" cadastrarCarona idSessao=${sessaoMark} origem= destino="João Pessoa" data="23/06/2013" hora="16:00" vagas=3
expectError "Origem inválida" cadastrarCarona idSessao=${sessaoMark} origem="" destino="São Paulo" data="31/05/2013" hora="08:00" vagas=2

expectError "Destino inválido" cadastrarCarona idSessao=${sessaoMark} origem="Campina Grande" destino= data="23/06/2013" hora="16:00" vagas=3
expectError "Destino inválido" cadastrarCarona idSessao=${sessaoMark} origem="Patos" destino="" data="31/05/2013" hora="08:00" vagas=2

expectError "Data inválida" cadastrarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="João Pessoa" data= hora="16:00" vagas=3
expectError "Data inválida" cadastrarCarona idSessao=${sessaoMark} origem="Patos" destino="João Pessoa" data="" hora="08:00" vagas=2
expectError "Data inválida" cadastrarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="João Pessoa" data="30/02/2012" hora="16:00" vagas=3
expectError "Data inválida" cadastrarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="João Pessoa" data="31/04/2012" hora="16:00" vagas=3
expectError "Data inválida" cadastrarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="João Pessoa" data="32/12/2012" hora="16:00" vagas=3
expectError "Data inválida" cadastrarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="João Pessoa" data="25/12/2011" hora="16:00" vagas=3


expectError "Hora inválida" cadastrarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="João Pessoa" data="23/06/2013" hora= vagas=3
expectError "Hora inválida" cadastrarCarona idSessao=${sessaoMark} origem="Patos" destino="João Pessoa" data="31/05/2013" hora="" vagas=2
expectError "Hora inválida" cadastrarCarona idSessao=${sessaoMark} origem="Patos" destino="João Pessoa" data="31/05/2013" hora="seis" vagas=2

expectError "Vaga inválida" cadastrarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="João Pessoa" data="23/06/2013" hora="16:00" vagas=
expectError "Vaga inválida" cadastrarCarona idSessao=${sessaoMark} origem="Patos" destino="João Pessoa" data="31/05/2013" hora="08:00" vagas="duas"

expectError "Identificador do carona é inválido" getAtributoCarona idCarona= atributo="origem"
expectError "Identificador do carona é inválido" getAtributoCarona idCarona="" atributo="origem"
expectError "Item inexistente" getAtributoCarona idCarona="xpto" atributo="destino"
expectError "Atributo inválido" getAtributoCarona idCarona=${carona3ID} atributo=
expectError "Atributo inválido" getAtributoCarona idCarona=${carona2ID} atributo=""
expectError "Atributo inexistente" getAtributoCarona idCarona=${carona1ID} atributo="xpto"
expectError "Carona Inexistente" getCarona idCarona=""
expectError "Carona Inválida" getCarona idCarona=
expectError "Carona Inexistente" getCarona idCarona="xpto"
expectError "Trajeto Inexistente" getTrajeto idCarona=""
expectError "Trajeto Inválida" getTrajeto idCarona=
expectError "Trajeto Inexistente" getTrajeto idCarona="xpto"

#Localizar carona com entrada inválida
expectError "Origem inválida" localizarCarona idSessao=${sessaoMark} origem="-" destino="João Pessoa"
expectError "Origem inválida" localizarCarona idSessao=${sessaoMark} origem="()" destino="João Pessoa"
expectError "Origem inválida" localizarCarona idSessao=${sessaoMark} origem="!" destino="João Pessoa"
expectError "Origem inválida" localizarCarona idSessao=${sessaoMark} origem="!?" destino="João Pessoa"
expectError "Destino inválido" localizarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="."
expectError "Destino inválido" localizarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="()"
expectError "Destino inválido" localizarCarona idSessao=${sessaoMark} origem="Campina Grande" destino="!?"

encerrarSistema
quit
